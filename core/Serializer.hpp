#pragma once
#include "QvPluginProcessor.hpp"

#include <QObject>

class SimpleSerializer : public Qv2rayPlugin::PluginOutboundHandler
{
    Q_OBJECT
  public:
    explicit SimpleSerializer(QObject *parent = nullptr) : Qv2rayPlugin::PluginOutboundHandler(parent){};
    const QString SerializeOutbound(const QString &protocol,  //
                                    const QString &alias,     //
                                    const QString &groupName, //
                                    const QJsonObject &object) const override
    {
        Q_UNUSED(protocol)
        Q_UNUSED(alias)
        Q_UNUSED(groupName)
        Q_UNUSED(object)
        return "fake-protocol://Fake:Shared@Link:By?Simple=Plugin";
    }
    const QPair<QString, QJsonObject> DeserializeOutbound(const QString &link, QString *alias, QString *errorMessage) const override
    {
        *alias = "Alias";
        *errorMessage = "";
        return { "fake_protocol", { { "type", "fakeOutbound" }, { "generated by", "QvSimplePlugin" }, { "link", link } } };
    }
    const Qv2rayPlugin::OutboundInfoObject GetOutboundInfo(const QString &protocol, const QJsonObject &outbound) const override
    {
        Q_UNUSED(protocol)
        Q_UNUSED(outbound)
        Qv2rayPlugin::OutboundInfoObject object;
        object[Qv2rayPlugin::INFO_PROTOCOL] = protocol;
        return object;
    }
    const QMap<QString, QString> SupportedProtocols() const override
    {
        return { { "fake_protocol", "fake-protocol://" } };
    }
};
